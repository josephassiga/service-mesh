apiVersion: v1
kind: Template 
metadata:
  name: financial-app
  annotations:
    description: "Financial sample application for Red hat Training"
objects:
- apiVersion: networking.istio.io/v1beta1
  kind: Gateway
  metadata:
    name: front-gateway
  spec: 
    selector:
      istio: ingressgateway # use istio default controller
    servers:
      - port:
          number: 80
          name: http
          protocol: HTTP
        hosts:
          - "*"
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  metadata:
    name: frontend-vs
  spec:
    hosts:
    - "*"
    gateways:
    - front-gateway
    http:
    - match:
      - uri:
          prefix: /frontend
      rewrite:
        uri: /
      route:
        - destination:
            host: frontend
            port:
              number: 3000

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: frontend-cm
  data:
    GW_ADDR: ${INGRESS_GW}/exchange

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: frontend
  spec:
    selector:
      matchLabels:
        app: frontend
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: frontend
      spec:
        containers:
        - name: frontend
          image: quay.io/redhattraining/ossm-frontend-traced:${FRONTEND_TAG}
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          env:
            - name: REACT_APP_GW_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: frontend-cm
                  key: GW_ADDR
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: frontend
    name: frontend
  spec:
    selector:
      app: frontend
    ports:
      - name: http
        port: 3000

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: history
  spec:
    selector:
      matchLabels:
        app: history
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: history
      spec:
        containers:
        - name: history
          image: quay.io/redhattraining/ossm-history-traced:${HISTORY_TAG}
          imagePullPolicy: Always
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: history
    name: history
  spec:
    selector:
      app: history
    ports:
      - name: http
        port: 8080

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: currency
  spec:
    selector:
      matchLabels:
        app: currency
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: currency
      spec:
        containers:
        - name: currency
          image: quay.io/redhattraining/ossm-currencies-traced:${CURRENCIES_TAG}
          imagePullPolicy: Always
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 5000
              name: http
              protocol: TCP

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: currency
    name: currency
  spec:
    selector:
      app: currency
    ports:
      - name: http
        port: 5000

- apiVersion: networking.istio.io/v1beta1
  kind: Gateway
  metadata:
    name: exchange-gateway
  spec: 
    selector:
      istio: ingressgateway # use istio default controller
    servers:
      - port:
          number: 80
          name: http
          protocol: HTTP
        hosts:
          - "*"

- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  metadata:
    name: frontend-vs
  spec:
    hosts:
    - "*"
    gateways:
    - exchange-gateway
    http:
    - match:
      - uri:
          prefix: /exchange
      rewrite:
        uri: /
      route:
        - destination:
            host: exchange
            port:
              number: 8080

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: exchange
  spec:
    selector:
      matchLabels:
        app: exchange
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "true"
        labels:
          app: exchange
      spec:
        containers:
        - name: currency
          image: quay.io/redhattraining/ossm-exchange-traced:${EXCHANGE_TAG}
          imagePullPolicy: Always
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
            - name: NEWS_ENDPOINT
              value: http://${NEWS_ENDPOINT}

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: exchange
    name: exchange
  spec:
    selector:
      app: exchange
    ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 8080

parameters:
  - name: INGRESS_GW
    description: "The address of the Istio Ingress Gateway, to be used for external exchange service"
    value: "http://istio-ingressgateway-istio-system.apps.cluster-fd44.fd44.sandbox825.opentlc.com"
  - name: NEWS_ENDPOINT
    description: "The address of the news service, without the protocol section"
    required: true
    value: "feed-news.apps-crc.testing"
  - name: FRONTEND_TAG
    description: "The tag of the image used to deploy the Frontend service"
    required: false
    value: "1.0"
  - name: HISTORY_TAG
    description: "The tag of the image used to deploy the History service"
    required: false
    value: "1.0"
  - name: CURRENCIES_TAG
    description: "The tag of the image used to deploy the Currencies service"
    required: false
    value: "1.0"
  - name: EXCHANGE_TAG
    description: "The tag of the image used to deploy the Exchange service"
    required: false
    value: "1.0"
